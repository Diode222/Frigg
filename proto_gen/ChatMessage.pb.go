// Code generated by protoc-gen-go. DO NOT EDIT.
// source: ChatMessage.proto

package proto_gen

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type WordAndPos struct {
	Word                 *string       `protobuf:"bytes,1,req,name=word" json:"word,omitempty"`
	Pos                  *PartOfSpeech `protobuf:"bytes,2,req,name=pos" json:"pos,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *WordAndPos) Reset()         { *m = WordAndPos{} }
func (m *WordAndPos) String() string { return proto.CompactTextString(m) }
func (*WordAndPos) ProtoMessage()    {}
func (*WordAndPos) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a19954073937298, []int{0}
}

func (m *WordAndPos) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_WordAndPos.Unmarshal(m, b)
}
func (m *WordAndPos) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_WordAndPos.Marshal(b, m, deterministic)
}
func (m *WordAndPos) XXX_Merge(src proto.Message) {
	xxx_messageInfo_WordAndPos.Merge(m, src)
}
func (m *WordAndPos) XXX_Size() int {
	return xxx_messageInfo_WordAndPos.Size(m)
}
func (m *WordAndPos) XXX_DiscardUnknown() {
	xxx_messageInfo_WordAndPos.DiscardUnknown(m)
}

var xxx_messageInfo_WordAndPos proto.InternalMessageInfo

func (m *WordAndPos) GetWord() string {
	if m != nil && m.Word != nil {
		return *m.Word
	}
	return ""
}

func (m *WordAndPos) GetPos() *PartOfSpeech {
	if m != nil {
		return m.Pos
	}
	return nil
}

type ChatMessage struct {
	Message              *string       `protobuf:"bytes,1,req,name=message" json:"message,omitempty"`
	Time                 *int64        `protobuf:"varint,2,req,name=time" json:"time,omitempty"`
	ChatPerson           *string       `protobuf:"bytes,3,req,name=chatPerson" json:"chatPerson,omitempty"`
	WordAndPosList       []*WordAndPos `protobuf:"bytes,4,rep,name=wordAndPosList" json:"wordAndPosList,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *ChatMessage) Reset()         { *m = ChatMessage{} }
func (m *ChatMessage) String() string { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()    {}
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a19954073937298, []int{1}
}

func (m *ChatMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatMessage.Unmarshal(m, b)
}
func (m *ChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatMessage.Marshal(b, m, deterministic)
}
func (m *ChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessage.Merge(m, src)
}
func (m *ChatMessage) XXX_Size() int {
	return xxx_messageInfo_ChatMessage.Size(m)
}
func (m *ChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessage proto.InternalMessageInfo

func (m *ChatMessage) GetMessage() string {
	if m != nil && m.Message != nil {
		return *m.Message
	}
	return ""
}

func (m *ChatMessage) GetTime() int64 {
	if m != nil && m.Time != nil {
		return *m.Time
	}
	return 0
}

func (m *ChatMessage) GetChatPerson() string {
	if m != nil && m.ChatPerson != nil {
		return *m.ChatPerson
	}
	return ""
}

func (m *ChatMessage) GetWordAndPosList() []*WordAndPos {
	if m != nil {
		return m.WordAndPosList
	}
	return nil
}

type ChatMessageList struct {
	ChatMessages         []*ChatMessage `protobuf:"bytes,1,rep,name=chatMessages" json:"chatMessages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ChatMessageList) Reset()         { *m = ChatMessageList{} }
func (m *ChatMessageList) String() string { return proto.CompactTextString(m) }
func (*ChatMessageList) ProtoMessage()    {}
func (*ChatMessageList) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a19954073937298, []int{2}
}

func (m *ChatMessageList) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatMessageList.Unmarshal(m, b)
}
func (m *ChatMessageList) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatMessageList.Marshal(b, m, deterministic)
}
func (m *ChatMessageList) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessageList.Merge(m, src)
}
func (m *ChatMessageList) XXX_Size() int {
	return xxx_messageInfo_ChatMessageList.Size(m)
}
func (m *ChatMessageList) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessageList.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessageList proto.InternalMessageInfo

func (m *ChatMessageList) GetChatMessages() []*ChatMessage {
	if m != nil {
		return m.ChatMessages
	}
	return nil
}

type ChatMessageListServiceStatus struct {
	OK                   *bool    `protobuf:"varint,1,req,name=OK" json:"OK,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatMessageListServiceStatus) Reset()         { *m = ChatMessageListServiceStatus{} }
func (m *ChatMessageListServiceStatus) String() string { return proto.CompactTextString(m) }
func (*ChatMessageListServiceStatus) ProtoMessage()    {}
func (*ChatMessageListServiceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_4a19954073937298, []int{3}
}

func (m *ChatMessageListServiceStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatMessageListServiceStatus.Unmarshal(m, b)
}
func (m *ChatMessageListServiceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatMessageListServiceStatus.Marshal(b, m, deterministic)
}
func (m *ChatMessageListServiceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessageListServiceStatus.Merge(m, src)
}
func (m *ChatMessageListServiceStatus) XXX_Size() int {
	return xxx_messageInfo_ChatMessageListServiceStatus.Size(m)
}
func (m *ChatMessageListServiceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessageListServiceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessageListServiceStatus proto.InternalMessageInfo

func (m *ChatMessageListServiceStatus) GetOK() bool {
	if m != nil && m.OK != nil {
		return *m.OK
	}
	return false
}

func init() {
	proto.RegisterType((*WordAndPos)(nil), "proto_gen.WordAndPos")
	proto.RegisterType((*ChatMessage)(nil), "proto_gen.ChatMessage")
	proto.RegisterType((*ChatMessageList)(nil), "proto_gen.ChatMessageList")
	proto.RegisterType((*ChatMessageListServiceStatus)(nil), "proto_gen.ChatMessageListServiceStatus")
}

func init() { proto.RegisterFile("ChatMessage.proto", fileDescriptor_4a19954073937298) }

var fileDescriptor_4a19954073937298 = []byte{
	// 314 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x50, 0x41, 0x4b, 0xf3, 0x40,
	0x14, 0x6c, 0x93, 0xc2, 0xf7, 0xf5, 0x55, 0xaa, 0x2e, 0x58, 0x97, 0x20, 0x52, 0xf6, 0x62, 0xbd,
	0xe4, 0x90, 0xa3, 0xe0, 0x41, 0x04, 0x3d, 0xd4, 0xd2, 0xb0, 0x01, 0x3d, 0x78, 0x90, 0x90, 0x3c,
	0xdb, 0x88, 0xed, 0xc6, 0xdd, 0x8d, 0xfd, 0x2f, 0xfe, 0x5a, 0xd9, 0xad, 0xa6, 0xdb, 0x50, 0xc5,
	0x53, 0x5e, 0x66, 0xe6, 0xcd, 0xcc, 0x5b, 0x38, 0xbc, 0x9e, 0xa7, 0x7a, 0x82, 0x4a, 0xa5, 0x33,
	0x0c, 0x4b, 0x29, 0xb4, 0x20, 0x5d, 0xfb, 0x79, 0x9a, 0xe1, 0x32, 0xe8, 0x3f, 0x08, 0x99, 0xdf,
	0x48, 0x7c, 0x5b, 0x53, 0x6c, 0x0c, 0x60, 0x90, 0xab, 0x65, 0x1e, 0x0b, 0x45, 0x08, 0x74, 0x56,
	0x42, 0xe6, 0xb4, 0x3d, 0xf4, 0x46, 0x5d, 0x6e, 0x67, 0x72, 0x0e, 0x7e, 0x29, 0x14, 0xf5, 0x86,
	0xde, 0xa8, 0x17, 0x1d, 0x87, 0xb5, 0x55, 0x18, 0xa7, 0x52, 0x4f, 0x9f, 0x93, 0x12, 0x31, 0x9b,
	0x73, 0xa3, 0x61, 0x1f, 0x6d, 0xe8, 0x39, 0xe9, 0x84, 0xc2, 0xbf, 0xc5, 0x7a, 0xfc, 0x72, 0xfc,
	0xfe, 0x35, 0x41, 0xba, 0x58, 0xa0, 0x75, 0xf5, 0xb9, 0x9d, 0xc9, 0x29, 0x40, 0x36, 0x4f, 0x75,
	0x8c, 0x52, 0x89, 0x25, 0xf5, 0xed, 0x82, 0x83, 0x90, 0x4b, 0xe8, 0xaf, 0xea, 0xaa, 0x77, 0x85,
	0xd2, 0xb4, 0x33, 0xf4, 0x47, 0xbd, 0xe8, 0xc8, 0xe9, 0xb4, 0xb9, 0x85, 0x37, 0xc4, 0x6c, 0x02,
	0xfb, 0x4e, 0x37, 0x03, 0x91, 0x0b, 0xd8, 0xcb, 0x36, 0x90, 0xa2, 0x6d, 0xeb, 0x37, 0x70, 0xfc,
	0x9c, 0x0d, 0xbe, 0xa5, 0x65, 0x21, 0x9c, 0x34, 0xec, 0x12, 0x94, 0xef, 0x45, 0x86, 0x89, 0x4e,
	0x75, 0xa5, 0x48, 0x1f, 0xbc, 0xe9, 0xd8, 0x9e, 0xfd, 0x9f, 0x7b, 0xd3, 0x71, 0x54, 0xc1, 0x60,
	0xb7, 0x9e, 0x3c, 0x02, 0x89, 0x2b, 0xdd, 0xec, 0x16, 0xec, 0x6e, 0x61, 0xb8, 0xe0, 0xec, 0x67,
	0x6e, 0xab, 0x04, 0x6b, 0x45, 0x2f, 0x70, 0x60, 0xde, 0x24, 0x29, 0x5f, 0x8b, 0x3a, 0xf0, 0x1e,
	0x82, 0x5b, 0xd4, 0x35, 0xac, 0x31, 0xff, 0x6b, 0xf0, 0x2f, 0x1c, 0x6b, 0x7d, 0x06, 0x00, 0x00,
	0xff, 0xff, 0xa9, 0x15, 0x19, 0xc4, 0x7a, 0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatMessageListServiceClient is the client API for ChatMessageListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatMessageListServiceClient interface {
	PutChatMessageList(ctx context.Context, in *ChatMessageList, opts ...grpc.CallOption) (*ChatMessageListServiceStatus, error)
}

type chatMessageListServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatMessageListServiceClient(cc *grpc.ClientConn) ChatMessageListServiceClient {
	return &chatMessageListServiceClient{cc}
}

func (c *chatMessageListServiceClient) PutChatMessageList(ctx context.Context, in *ChatMessageList, opts ...grpc.CallOption) (*ChatMessageListServiceStatus, error) {
	out := new(ChatMessageListServiceStatus)
	err := c.cc.Invoke(ctx, "/proto_gen.ChatMessageListService/PutChatMessageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatMessageListServiceServer is the server API for ChatMessageListService service.
type ChatMessageListServiceServer interface {
	PutChatMessageList(context.Context, *ChatMessageList) (*ChatMessageListServiceStatus, error)
}

// UnimplementedChatMessageListServiceServer can be embedded to have forward compatible implementations.
type UnimplementedChatMessageListServiceServer struct {
}

func (*UnimplementedChatMessageListServiceServer) PutChatMessageList(ctx context.Context, req *ChatMessageList) (*ChatMessageListServiceStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutChatMessageList not implemented")
}

func RegisterChatMessageListServiceServer(s *grpc.Server, srv ChatMessageListServiceServer) {
	s.RegisterService(&_ChatMessageListService_serviceDesc, srv)
}

func _ChatMessageListService_PutChatMessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessageList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatMessageListServiceServer).PutChatMessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_gen.ChatMessageListService/PutChatMessageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatMessageListServiceServer).PutChatMessageList(ctx, req.(*ChatMessageList))
	}
	return interceptor(ctx, in, info, handler)
}

var _ChatMessageListService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto_gen.ChatMessageListService",
	HandlerType: (*ChatMessageListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PutChatMessageList",
			Handler:    _ChatMessageListService_PutChatMessageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ChatMessage.proto",
}

// WordSplitServiceClient is the client API for WordSplitService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WordSplitServiceClient interface {
	GetWordSplittedMessageList(ctx context.Context, in *ChatMessageList, opts ...grpc.CallOption) (*ChatMessageList, error)
}

type wordSplitServiceClient struct {
	cc *grpc.ClientConn
}

func NewWordSplitServiceClient(cc *grpc.ClientConn) WordSplitServiceClient {
	return &wordSplitServiceClient{cc}
}

func (c *wordSplitServiceClient) GetWordSplittedMessageList(ctx context.Context, in *ChatMessageList, opts ...grpc.CallOption) (*ChatMessageList, error) {
	out := new(ChatMessageList)
	err := c.cc.Invoke(ctx, "/proto_gen.WordSplitService/GetWordSplittedMessageList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WordSplitServiceServer is the server API for WordSplitService service.
type WordSplitServiceServer interface {
	GetWordSplittedMessageList(context.Context, *ChatMessageList) (*ChatMessageList, error)
}

// UnimplementedWordSplitServiceServer can be embedded to have forward compatible implementations.
type UnimplementedWordSplitServiceServer struct {
}

func (*UnimplementedWordSplitServiceServer) GetWordSplittedMessageList(ctx context.Context, req *ChatMessageList) (*ChatMessageList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWordSplittedMessageList not implemented")
}

func RegisterWordSplitServiceServer(s *grpc.Server, srv WordSplitServiceServer) {
	s.RegisterService(&_WordSplitService_serviceDesc, srv)
}

func _WordSplitService_GetWordSplittedMessageList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatMessageList)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WordSplitServiceServer).GetWordSplittedMessageList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto_gen.WordSplitService/GetWordSplittedMessageList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WordSplitServiceServer).GetWordSplittedMessageList(ctx, req.(*ChatMessageList))
	}
	return interceptor(ctx, in, info, handler)
}

var _WordSplitService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "proto_gen.WordSplitService",
	HandlerType: (*WordSplitServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetWordSplittedMessageList",
			Handler:    _WordSplitService_GetWordSplittedMessageList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "ChatMessage.proto",
}
